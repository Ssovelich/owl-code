import { useState, useEffect, useCallback } from 'react';
import styles from './CallRequestModal.module.css';

const TELEGRAM_BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID;

const CallRequestModal = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [phone, setPhone] = useState('');
  const [isSent, setIsSent] = useState(false);
  const [countdown, setCountdown] = useState(60);

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏
  const closeModal = useCallback(() => {
    setIsOpen(false);
  }, []);

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  const handleSend = async () => {
    if (!phone.trim()) return;

    try {
      const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: `üìû –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞:\n–ù–æ–º–µ—Ä: ${phone}`,
        }),
      });

      if (res.ok) {
        setIsSent(true);
        setCountdown(60);
      } else {
        alert('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–æ–∫–µ–Ω/ID');
      }
    } catch (err) {
      console.error(err);
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
    }
  };

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    let timer;
    if (isSent && countdown > 0) {
      timer = setTimeout(() => setCountdown((prev) => prev - 1), 1000);
    }
    if (isSent && countdown === 0) {
      setIsSent(false);
      setPhone('');
      setIsOpen(false); // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
    }
    return () => clearTimeout(timer);
  }, [isSent, countdown]);

  // –û–±—Ä–æ–±–∫–∞ Escape
  useEffect(() => {
    const handleEsc = (e) => {
      if (e.key === 'Escape') closeModal();
    };
    if (isOpen) {
      window.addEventListener('keydown', handleEsc);
    }
    return () => window.removeEventListener('keydown', handleEsc);
  }, [isOpen, closeModal]);

  // –ó–∞–±–æ—Ä–æ–Ω–∞ —Å–∫—Ä–æ–ª—É
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    return () => {
      document.body.style.overflow = '';
    };
  }, [isOpen]);

  // –û–±—Ä–æ–±–∫–∞ –±–µ–∫–¥—Ä–æ–ø—É
  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) closeModal();
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className={styles.btn}>
        –ó–∞–º–æ–≤–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫
      </button>

      {isOpen && (
        <div className={styles.modal_overlay} onClick={handleOverlayClick}>
          <div className={styles.modal}>
            <button onClick={closeModal} className={styles.close_btn}>√ó</button>

            {!isSent ? (
              <>
                <h2 className={styles.title}>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</h2>
                <input
                  type="tel"
                  placeholder="+380..."
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className={styles.phone_input}
                />
                <button onClick={handleSend} className={styles.btn}>
                  –ó–∞–º–æ–≤–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫
                </button>
              </>
            ) : (
              <div className={styles.success_block}>
                <p className={styles.text}>
                  ‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –≤–∞–º –ø—Ä–æ—Ç—è–≥–æ–º {countdown} —Å–µ–∫.
                </p>
              </div>
            )}
          </div>
        </div>
      )}
    </>
  );
};

export default CallRequestModal;
